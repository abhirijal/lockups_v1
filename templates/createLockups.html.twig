{% block body %}

<div class="dcf-wrapper dcf-bleed dcf-pt-4 dcf-pb-7">
    <div class="dcf-grid">
        <div class="dcf-col-33%-start left-sidebar dcf-rounded dcf-p-6">
            <h5 class="dcf-mb-5">Select your template</h5>
            <nav class="nav nav-pills nav-justified dcf-mb-6">
                <button id="horizontal-button" class="nav-link active unl-bg-scarlet"
                    aria-current="page">Horizontal</button>
                <button id="vertical-button" class="nav-link unl-darker-gray">Vertical</button>
            </nav>
            <div style="height: 60vh; overflow-y: auto;">
                <div id="horizontal-tab">
                    <!-- <div id="hlogo01" class="dcf-p-3 dcf-mt-3 dcf-mb-3 dcf-relative" onclick="setLockup('hlogo01')">
                        <img style="width: 400px; height: auto;" src="img/org1.png" alt="">
                        <div class="dcf-absolute img-thumb img-thumb-active"></div>
                    </div>-->
                    {% for item in lockups %}
                    {% if item.getStyle == "h" %}
                    <div class="dcf-p-3 dcf-mt-3 dcf-mb-3 dcf-relative lockup-templates">
                        <img style="width: 400px; height: auto;" src="{{item.getImage}}" alt="{{item.getName}}">
                        <div id="{{item.getStyle}}{{item.getId}}" class="dcf-absolute img-thumb {{ (item.getId == 1) ? "
                            img-thumb-active"}}">
                        </div>
                    </div>
                    {% endif %}
                    {% endfor %}
                </div>
                <div id="vertical-tab" style="display: none;">
                    {% for item in lockups %}
                    {% if item.getStyle == "v" %}
                    <div class="dcf-p-3 dcf-mt-3 dcf-mb-3 dcf-relative lockup-templates">
                        <img style="width: 400px; height: auto;" src="{{item.getImage}}" alt="{{item.getName}}">
                        <div id="{{item.getStyle}}{{item.getId}}" class="dcf-absolute img-thumb">
                        </div>
                    </div>
                    {% endif %}
                    {% endfor %}
                </div>
            </div>
        </div>
        <div class="dcf-col-67%-end dcf-p-6">
            <h5 class="dcf-mb-6">Preview</h5>
            <div>
                {% for item in lockups %}
                <div id="{{item.getStyle}}{{item.getId}}svg" style="display:{{ (item.getId == 1) ? " block" : "none" }}"
                    class="svgTabs">
                    <div class="dcf-txt-center">
                    {{item.getSvg | raw}}
                </div>
                    <p class="dcf-mt-5 dcf-txt-3xs"> <i class="dxf-txt-left">{{item.getDescription}}</i></p>
            </div>
                    {% endfor %}
                </div>
            <form method="POST" action="/">
                <!--  name stores the post form data -->
                <input type="hidden" id="lockupTemplateId" name="lockuptemplate" value="1">
                <div class="dcf-mt-6">
                    {% for item in lockups_fields %}
                    <div id="{{ item.getSlug }}" class="dcf-mb-3 input_field_class" style="display: {{(item.getId == 1) ? "block" : "none"}};">
                        <label for="exampleFormControlInput1" class="form-label">{{ item.getName }}</label>
                        <input type="text" class="dcf-input-text dcf-w-100%" name="{{ item.getSlug }}" maxlength="{{ item.getLength }}"
                            value="{{item.getValue}}" placeholder="Organization" {{(item.getUppercase == 1) ? "style=\"text-transform:uppercase\""}}>
                        <p style="font-size: .8em;font-style: italic;">Maximum {{ item.getLength }} characters.</p>
                    </div>
                    {% endfor %}
                    <!-- <div id="org_second_line" class="dcf-mb-3 input_field_class" style="display: none;">
                        <label for="exampleFormControlInput2" class="form-label">Organization Name Second Line</label>
                        <input type="text" class="dcf-input-text dcf-w-100%" name="org_second_line"
                            value="Organization Second Line" placeholder="SecondLineOrganization" maxlength="31">
                        <p style="font-size: .8em;font-style: italic;">Maximum 31 characters.</p>
                    </div>
                    <div id="subject_first_line" class="dcf-mb-3 input_field_class" style="display: none;">
                        <label for="exampleFormControlInput2" class="form-label">Subject First Line</label>
                        <input type="text" class="dcf-input-text dcf-w-100%" name="subject_first_line"
                            value="Organization Second Line" placeholder="SecondLineOrganization">
                    </div>
                    <div id="subject_second_line" class="dcf-mb-3 input_field_class" style="display: none;">
                        <label for="exampleFormControlInput2" class="form-label">Organization Name Second Line</label>
                        <input type="text" class="dcf-input-text dcf-w-100%" name="subject_second_line"
                            value="Organization Second Line" placeholder="SecondLineOrganization">
                    </div> -->
                    <div class="dcf-mb-3">
                        <select def id="approver" name="approver"
                            class="dcf-input-select dcf-b-1 dcf-b-solid dcf-rounded">
                            <option value="">Select your Communicator Contact</option>
                            <option value="4">Michael Bergland-Riese (EXT)</option>
                            <option value="5">Kerry McCullough-Vondrak (ARCH)</option>
                            <option value="6">Terri Pieper (CAS)</option>
                            <option value="7">Sheri Irwin Gish (CBA)</option>
                            <option value="9">JS Engebretson (ENG)</option>
                            <option value="11">Amber Wolff (LAW)</option>
                            <option value="12">Kathe Andersen (FPA)</option>
                            <option value="14">Shari Rosso (UH)</option>
                            <option value="24">Lonna Henrichs (ATH)</option>
                            <option value="326">Lauren Gayer (Student Affairs)</option>
                            <option value="340">Mike Jackson (RSO)</option>
                            <option value="351">Haley Apel (CEHS)</option>
                            <option value="425">Joan Barnes (Libraries)</option>
                            <option value="476">Ashley Washburn (ORED)</option>
                            <option value="557">Chris Dulak (CREC)</option>
                            <option value="935">Haley Hamel (JMC)</option>
                            <option value="1285">Christina Gardner (B&amp;F)</option>
                            <option value="1294">Julie Kundhi (Academic Affairs)</option>
                            <option value="1507">Jerri Harner (ODI)</option>
                            <option value="1517">Jeff Sheldon (ALUM)</option>
                            <option value="1688">Cara Pesek (CASNR &amp; IANR)</option>
                            <option value="">I'm not sure / not listed / N/A</option>
                        </select>
                    </div>
                    <button class="dcf-btn dcf-btn-primary">Submit</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- tabs script -->
<script>
    const horizontalBtn = document.getElementById("horizontal-button");
    const verticalBtn = document.getElementById("vertical-button");
    const horizontalTab = document.getElementById("horizontal-tab");
    const verticalTab = document.getElementById("vertical-tab");

    horizontalBtn.addEventListener("click", clickHorizontal);
    verticalBtn.addEventListener("click", clickVertical);

    function clickHorizontal() {
        verticalBtn.classList.remove("active", "unl-bg-scarlet");
        verticalBtn.classList.add("unl-darker-gray");
        horizontalBtn.classList.add("unl-bg-scarlet", "active");
        horizontalBtn.classList.remove("unl-darker-gray");

        verticalTab.style.display = "none";
        horizontalTab.style.display = "block";
    }

    function clickVertical() {
        horizontalBtn.classList.remove("active", "unl-bg-scarlet");
        horizontalBtn.classList.add("unl-darker-gray");
        verticalBtn.classList.add("unl-bg-scarlet", "active");
        verticalBtn.classList.remove("unl-darker-gray");

        horizontalTab.style.display = "none";
        verticalTab.style.display = "block";
    }
</script>

<!-- script to connect input field and svg rendered texts -->
<script>
    const inputArray = {{json_lockups_fields | raw}};
    let Svg = []; // select the fields accross all SVGs
    let InputDiv = []; // used to store the input field div container. used for showing and hiding input fields.
    let InputField = []; // used to store the input field itself. used for updating values accross field and SVGs.
    // org_first_line
    for (let k = 0; k <inputArray.length; k++) {
        Svg[k] = document.getElementsByClassName(inputArray[k]['slug']);
        InputDiv[k] = document.getElementById(inputArray[k]['slug']);
        InputField[k] = InputDiv[k].getElementsByTagName("input")[0];
        InputField[k].addEventListener("input", function() {
            updateSvgs(k)
        });
    }
    window.addEventListener('load', setInitialValues)

    function setInitialValues() { // set the initial value of the fields and svg according to the database. TODO: update fields to the form fields as well
        for (let k = 0; k <inputArray.length; k++) {
            for (let i = 0; i < Svg[k].length; i++) {
            if (inputArray[k]['Uppercase'] == 1) {
                Svg[k][i].innerHTML = inputArray[k]['Value'].toUpperCase();
            } else {
                Svg[k][i].innerHTML = inputArray[k]['Value'];
            }
        }
    }
    }

    function updateSvgs(k) {
        for (let i = 0; i < Svg[k].length; i++) {
            if (inputArray[k]['Uppercase'] == 1) {
                Svg[k][i].innerHTML = InputField[k].value.toUpperCase();
            } else {
                Svg[k][i].innerHTML = InputField[k].value;
            }
        }
    }
</script>


<!-- lockups selector script -->
<script>
    const lockupTemplates = document.getElementsByClassName("lockup-templates");
    const lockupSvgTabs = document.getElementsByClassName("svgTabs");
    const input_fields = document.getElementsByClassName("input_field_class");
    for (let i = 0; i < lockupTemplates.length; i++) {
        lockupTemplates[i].addEventListener("click", selectLockupTemplate);
    }

    function selectLockupTemplate(event) {
        let selectedSvgTab = document.getElementById(event.target.id + "svg");

        // remove the active tag from all the lockups
        for (let i = 0; i < lockupTemplates.length; i++) {
            let childElement = lockupTemplates[i].getElementsByClassName("img-thumb");
            childElement[0].classList.remove("img-thumb-active");
        }
        // add the active tag to the selected element
        event.target.classList.add("img-thumb-active");

        // change the SVG tabs too
        // first set display: none to all SVG tabs
        for (let i = 0; i < lockupSvgTabs.length; i++) {
            lockupSvgTabs[i].style.display = "none";
        }
        // and set display: block to the one selected
        selectedSvgTab.style.display = "block";

        // check the fields in the SVG and display the form field accordingly
        // first set all fields to display: none
        for (let j = 0; j < input_fields.length; j++) {
            input_fields[j].style.display = "none";
        }
        // now check for field class names in the SVG tab and display the field div accordingly.
        // as of now, the only way to assign fields to the SVG is through the SVG code itself.
        for (let j = 0; j < input_fields.length; j++) {
            if (selectedSvgTab.getElementsByClassName(inputArray[j]['slug']).length != 0) {
                InputDiv[j].style.display = "block";
        }
        }
    }
</script>

{% endblock %}